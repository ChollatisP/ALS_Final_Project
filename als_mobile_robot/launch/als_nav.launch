<launch >

<!-- ROBOT -->
    <master auto="start"/>

     <param name="robot_description" command="$(find xacro)/xacro '$(find als_mobile_robot)/urdf/robot.urdf.xacro'" />

     <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
     <param name="use_gui" value="False"/>
     </node>

     <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher"></node>

<!-- GAZEBO -->
<arg name="paused" default="false"/>
<arg name="use_sim_time" default="true"/>
<arg name="gui" default="false"/> <!-- Default to false to disable GUI -->
<arg name="headless" default="true"/> <!-- Set to true for headless mode -->
<arg name="debug" default="false"/>
<arg name="gui_required" default="true"/>
<arg name="mesh_enabled" default="true"/>
<arg name="robot_namespace" default="/"/>

<!-- Include Gazebo World with Headless Mode -->
<include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find als_mobile_robot)/world/cafe" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="gui" value="false"/> <!-- Disable GUI for headless -->
    <arg name="headless" value="true"/> <!-- Ensure headless mode is true -->
    <arg name="debug" value="$(arg debug)"/>
    <arg name="verbose" default="false"/>
    <arg name="gui_required" value="$(arg gui_required)"/>
</include>

<group ns="$(arg robot_namespace)">
    <!-- Load Robot Description -->
    <param name="robot_description" command="$(find xacro)/xacro '$(find als_mobile_robot)/urdf/robot.urdf.xacro' --inorder mesh_enabled:=$(arg mesh_enabled)" />

    <!-- Spawn Robot Model in Gazebo -->
    <node name="ds_spawn" pkg="gazebo_ros" type="spawn_model" output="screen" args="-z 0.5 -urdf -param robot_description -model $(arg robot_namespace)" />

    <!-- Load Controller Configuration -->
    <rosparam command="load" file="$(find als_mobile_robot)/config/control_diff.yaml" />

    <!-- Spawn Controllers -->
    <node name="base_controller_spawner" pkg="controller_manager" type="spawner" args="joint_state_controller velocity_controller" />
</group>


     <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0.0 0.0 0.0 0.0 0.0 0.0 odom map 100"/>
     <!-- <node pkg="tf" type="static_transform_publisher" name="odom_to_base" args="0.0 0.0 0.0 0.0 0.0 0.0 /odom base_link 100"/> -->
     <!-- <node pkg="tf" type="static_transform_publisher" name="base_to_odom" args="0.1 0 0.2 0 0 0 /base_link /laser_frame 100"/>  -->
          <!-- <node pkg="tf" type="static_transform_publisher" name="map_to_base" args="0 0 0 0 0 0 /base_link /scan 100"/>  -->
          <!-- <node name="static_transform_publisher" pkg="tf" type="static_transform_publisher" args="0.1 0 0 0 0 0 base_link lidar_link 40"/> -->

     <!-- <param name="scan_topic" value="/scan" />
     <param name="base_frame" value="base_link" />
     <param name="map_frame" value="map" />
     <param name="max_iterations" value="10" />
     <param name="angular_threshold" value="0.1" />
     <node pkg="laser_scan_matcher" type="laser_scan_matcher_node" name="laser_scan_matcher" /> -->

<!-- mcl.launch -->
    <!-- ROS parameters -->
     <param name="use_sim_time" value="true"/>
    <!-- Node name -->
    <arg name="node_name" default="mcl" />

    <!-- Input messages -->
    <arg name="scan_name" default="/scan" /> <!-- sensor_msgs::LaserScan -->
    <arg name="odom_name" default="/odom" /> <!-- nav_msgs::Odometry -->
    <arg name="map_name" default="/map" /> <!-- nav_msgs::OccupancyGrid -->

    <!-- Output messages -->
    <arg name="pose_name" default="/mcl_pose" /> <!-- geometry_msgs::PoseStamped -->
    <arg name="particles_name" default="/mcl_particles" /> <!-- geometry_msgs::PoseArray -->
    <arg name="unknown_scan_name" default="/unknown_scan" /> <!-- sensor_msgs::LaserScan -->
    <arg name="residual_errors_name" default="/residual_errors" /> <!-- sensor_msgs::LaserScan -->
    <arg name="reliability_marker_name" default="/reliability_marker_name" /> <!-- visualization_msgs::Marker -->

    <!-- Output messages from GL pose sampler -->
    <arg name="gl_sampled_poses_name" default="/gl_sampled_poses" /> <!-- geometry_msgs::PoseArray -->
    <arg name="local_map_name" default="/gl_local_map" /> <!-- nav_msgs::OccupancyGrid -->
    <arg name="sdf_keypoints_name" default="/gl_sdf_keypoints" /> <!-- visualization_msgs::Marker -->
    <arg name="local_sdf_keypoints_name" default="/gl_local_sdf_keypoints" /> <!-- visualization_msgs::Marker -->

    <!-- TF frames -->
     <arg name="laser_frame" default="/laser_frame" />
     <arg name="base_link_frame" default="base_link" />
     <arg name="map_frame" default="map" />
     <arg name="odom_frame" default="odom" />
     <arg name="use_odom_frame" default="false" />
     

<!-- MCL parameters -->
    <!-- Numbers of particles
         In this MCL package, the numbers of the particles are constant. -->
    <arg name="particle_num" default="1000" />

    <arg name="use_augmented_mcl" default="true" />
    <arg name="alpha_slow" default="0.001" />
    <arg name="alpha_fast" default="0.99" />
    <arg name="add_random_particles_in_resampling" default="true" />
    <arg name="random_particles_rate" default="0.1" />

    <!-- If publish_residual_errors is true,
         the residual errors from the estimated pose will be published. -->
    <arg name="publish_residual_errors" default="true" />


    <arg name="scan_step" default="5" />

    <!-- A parameter for the class conditional measurement model. 0.5 is recommended.
         This must be included from 0 to 1. -->
    <arg name="known_class_prior" default="0.5" />

    <!-- If rate of the effective sample size is less than resample_threshold_ess,
         resampling will be performed.
         This must be included from 0 to 1. -->
    <arg name="resample_threshold_ess" default="0.5" />

    <!-- If estimate_reliability is true, the reliability estimation is performed. -->
    <arg name="estimate_reliability" default="true" />

    <!-- A localization failure detector is used to perform the reliability estimation.
         0: mean absolute error.
         Note that only mean-absolute-error-based classifier is supported in the current version. -->
    <arg name="classifier_type" default="0" />

    <!-- Mean absolute error (MAE)-based localization failure detector.
         If classifier_type = 0, these parameters must be appropriately set.
         mae_max_residual_error and mae_histogram_bin_width must be larger than 0. -->
    <arg name="mae_classifier_dir" default="$(find als_ros)/classifiers/MAE/" />
    <arg name="mae_max_residual_error" default="0.5" />
    <arg name="mae_histogram_bin_width" default="0.05" />

    <!-- If use_gl_pose_sampler is true, global-localization-based pose sampler is used.
         The sampled poses are integrated to the mcl estimate via importance sampling. -->
    <arg name="use_gl_pose_sampler" default="true" />

    <!-- fuse_gl_pose_sampler_only_unreliable is true,
         the sampled pose is fused if reliability is less than 90 %.
         This flag is ignored if estimate_reliability is false. -->
    <arg name="fuse_gl_pose_sampler_only_unreliable" default="true" />


    <arg name="gl_sampled_pose_time_th" default="1.0" />

    <!-- Assume that the predictive distribution can be approximately represented by the Gaussian mixture model (GMM)
         based on the particles updated by the motion model.
         GMM is used to calculate likelihood of the poses drawn by the GL pose sampler.
         Following variances are parameters for GMM.
         gmm_positional_variance and gmm_angular_variance must be larger than 0. -->
    <arg name="gmm_positional_variance" default="0.01" />
    <arg name="gmm_angular_variance" default="0.01" />

    <!-- Rate of uniform distribution in approximation of the predictive distribution
         If pred_dist_unif_rate is 0.0,
         large localization error cannot be compensated even if global localization is used.
         This must be included from 0 to 1. -->
    <arg name="pred_dist_unif_rate" default="0.05" />

    <!-- If use_mrf_failure_detector is true, Markov-random-fields-based localization failure detector is used.
         Note that Note that the failure detector just publishes failure probability. -->
    <arg name="use_mrf_failure_detector" default="false" />

    <!-- Write pose if write_pose is true
         Pose data (timestamp, x, y, yaw) will be recorded in the pose_log_file. -->
    <arg name="write_pose" default="true" />
    <arg name="pose_log_file" default="/tmp/als_ros_pose.txt" />

    <!-- localization Hz -->
    <arg name="localization_hz" default="12.0" />

    <!-- transform tolerance between mcl pose and odometry in second -->
    <arg name="transform_tolerance" default="0.0" />

    <!-- Parameters used for randam particles in resampling (x, y, yaw).
         These parameters are used when use_augmented_mcl or add_random_particles_in_resampling is true. -->
    <rosparam param="/$(arg node_name)/random_particles_noise" > [0.05, 0.05, 0.1] </rosparam >

    <!-- Motion noises
         ddm and odm stand for differential drive model and omni directional model, respectively. -->
    <rosparam param="/$(arg node_name)/odom_noise_ddm" > [1.0, 0.5, 0.5, 1.5] </rosparam >
    <rosparam param="/$(arg node_name)/odom_noise_odm" > [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 8.0] </rosparam >

    <!-- Parameters used in the reliability transition model
         If the values are large, reliability quickly decrease according to robot move.
         If the values are zero, reliability does not decrease even if the robot moves. -->
    <rosparam param="/$(arg node_name)/rel_trans_ddm" > [0.0, 0.0] </rosparam >
    <rosparam param="/$(arg node_name)/rel_trans_odm" > [0.0, 0.0, 0.0] </rosparam >

    <!-- Resampling thresholds to delta x, y, distance, yaw, and time, respectively. 
         If all parameters are set to minus, these thresholds are ignored. -->
    <rosparam param="/$(arg node_name)/resample_thresholds" > [0.2, 0.2, 0.2, 0.02, -99999.0] </rosparam >




    <!-- include other launch files -->

    <!-- <include file="$(find als_ros)/launch/robot_tf.launch" >
        <arg name="laser_frame" value="$(arg laser_frame)" />
        <arg name="base_link_frame" value="$(arg base_link_frame)" />
    </include > -->
<!--  -->



<!-- 
    <include file="$(find als_ros)/launch/map_server.launch" >
        <arg name="map_name" value="$(arg map_name)" />
    </include > -->




    <include file="$(find als_ros)/launch/gl_pose_sampler.launch" if="$(arg use_gl_pose_sampler)" >
        <arg name="map_name" value="$(arg map_name)" />
        <arg name="scan_name" value="$(arg scan_name)" />
        <arg name="odom_name" value="$(arg odom_name)" />

        <arg name="poses_name" value="$(arg gl_sampled_poses_name)" />
        <arg name="local_map_name" value="$(arg local_map_name)" />
        <arg name="sdf_keypoints_name" value="$(arg sdf_keypoints_name)" />
        <arg name="local_sdf_keypoints_name" value="$(arg local_sdf_keypoints_name)" />

        <arg name="map_frame" value="$(arg map_frame)" />
        <arg name="odom_frame" value="$(arg odom_frame)" />
        <arg name="base_link_frame" value="$(arg base_link_frame)" />
        <arg name="laser_frame" value="$(arg laser_frame)" />
    </include >



    <include file="$(find als_ros)/launch/mrf_failure_detector.launch" if="$(arg use_mrf_failure_detector)" >
        <arg name="residual_errors_name" value="$(arg residual_errors_name)" />
        <arg name="marker_frame" value="$(arg base_link_frame)" />
    </include >



    <!-- MCL node -->
    <node name="$(arg node_name)" pkg="als_ros" type="mcl" output="screen" >
          <param name="measurement_model_type" value="2" />

        <param name="scan_name" value="$(arg scan_name)" type="string" />
        <param name="odom_name" value="$(arg odom_name)" type="string" />
        <param name="map_name" value="$(arg map_name)" type="string" />
        <param name="pose_name" value="$(arg pose_name)" type="string" />
        <param name="particles_name" value="$(arg particles_name)" type="string" />
        <param name="unknown_scan_name" value="$(arg unknown_scan_name)" type="string" />
        <param name="residual_errors_name" value="$(arg residual_errors_name)" type="string" />
        <param name="gl_sampled_poses_name" value="$(arg gl_sampled_poses_name)" type="string" />
        <param name="reliability_marker_name" value="$(arg reliability_marker_name)" type="string" />

        <param name="laser_frame" value="$(arg laser_frame)" type="string" />
        <param name="base_link_frame" value="$(arg base_link_frame)" type="string" />
        <param name="map_frame" value="$(arg map_frame)" type="string" />
        <param name="odom_frame" value="$(arg odom_frame)" type="string" />

          <!-- If broadcast_tf is true,
          the localizer broadcasts transformation between the map and odometry frames. -->
          <param name="broadcast_tf"      value="true" />

          <!-- If use_odom_tf is false, transformation from the map to base link is directly broadcast.
          If your odometry node does not broadcast transformation between odometry and base link, this must be false. -->
          <param name="use_odom_tf"       value="true" />

          <!-- Initial pose (x [m], y [m], yaw [deg]) -->
          <param name="initial_pose_x"    value="0.0" />
          <param name="initial_pose_y"    value="0.0" />
          <param name="initial_pose_yaw"  value="0.0" />

          <!-- Initial noise -->
          <param name="initial_noise_x"   value="0.02" />
          <param name="initial_noise_y"   value="0.02" />
          <param name="initial_noise_yaw" value="0.01" />

        <param name="particle_num" value="$(arg particle_num)" type="int" />


          <!-- If use_augmented_mcl is true, augmented MCL is used.
          Augmented MCL adds random particles when doing resampling if MCL might fail localization.
          alpha_slow and alpha_fast are parameters for augmented MCL (0 < alpha_slow << alpha_fast < 1).
          If add_random_particles_in_resampling is true, random particles are also added in resampling.
          (random_particles_rate * particle_num) particles are added
          if add_random_particles_in_resampling is true. -->
          <param name="use_augmented_mcl"                   value="false" />
          <param name="alpha_slow"                          value="0.001" />
          <param name="alpha_fast"                          value="0.99" />
          <param name="add_random_particles_in_resampling"  value="true" />
          <param name="random_particles_rate"               value="0.1" />


          <!--If use_omni_directional_model is true, the omnidirectional motion model is used.
          A default motion model is the differential drive model. -->
          <param name="use_omni_directional_model"  value="false"/>
          <param name="reject_unknown_scan"         value="false"/>
          <param name="publish_unknown_scan"        value="true" />
          <param name="unknown_scan_prob_threshold" value="0.9"/>

        <param name="publish_residual_errors" value="$(arg publish_residual_errors)" type="bool" />

        <param name="scan_step" value="$(arg scan_step)" type="int" />

          <!-- The measurement models' parameters
          The sum of z_hit, z_max, and z_rand must be 1
          when the likelihood field and class coditional measurment models are used. 
          The sum of z_hit, z_short, z_max, and z_rand must be 1 when the beam model is used. -->
          <param name="laser_max_range"           value="-1"/>      
          <param name="laser_max_beams"           value="30"/> 
          <param name="/z_hit"                    value="0.95" /> 
          <param name="/z_short"                  value="0.1" /> 
          <param name="/z_max"                    value="0.05" /> 
          <param name="/z_rand"                   value="0.05" /> 
          <param name="/var_hit"                  value="0.01" /> 
          <param name="/lambda_short"             value="0.1" /> 
          <param name="/lambda_unknown"           value="0.01"  /> 
          <param name="laser_likelihood_max_dist" value="2.0"/>
          <param name="laser_model_type"          value="likelihood_field"/>

        <param name="known_class_prior" value="$(arg known_class_prior)" type="double" />

        <param name="resample_threshold_ess" value="$(arg resample_threshold_ess)" type="double" />

        <param name="estimate_reliability" value="$(arg estimate_reliability)" type="bool" />
        <param name="classifier_type" value="$(arg classifier_type)" type="int" />
        <param name="mae_classifier_dir" value="$(arg mae_classifier_dir)" type="string" />
        <param name="mae_max_residual_error" value="$(arg mae_max_residual_error)" type="double" />
        <param name="mae_histogram_bin_width" value="$(arg mae_histogram_bin_width)" type="double" />

        <param name="use_gl_pose_sampler" value="$(arg use_gl_pose_sampler)" type="bool" />
        <param name="fuse_gl_pose_sampler_only_unreliable" value="$(arg fuse_gl_pose_sampler_only_unreliable)" type="bool" />
        <param name="gl_sampled_pose_time_th" value="$(arg gl_sampled_pose_time_th)" type="double" />
        <param name="gmm_positional_variance" value="$(arg gmm_positional_variance)" type="double" />
        <param name="gmm_angular_variance" value="$(arg gmm_angular_variance)" type="double" />

        <param name="write_pose" value="$(arg write_pose)" type="bool" />
        <param name="pose_log_file" value="$(arg pose_log_file)" type="string" />

        <param name="localization_hz" value="$(arg localization_hz)" type="double" />
        <param name="transform_tolerance" value="$(arg transform_tolerance)" type="double" />

    </node >


<!-- Map server -->
    <arg name="map_file" default="$(find als_mobile_robot)/map/cafe/map_cafe.yaml"/>
    <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />



<!-- move_base -->
    <arg name="cmd_vel_topic" default="/velocity_controller/cmd_vel" />
    <arg name="odom_topic" default="odom" />
    <arg name="move_forward_only" default="false"/>

     <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
     <rosparam file="$(find als_mobile_robot)/config/move_base_params.yaml" command="load" />
     <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
     <rosparam file="$(find als_mobile_robot)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
     <rosparam file="$(find als_mobile_robot)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
     <rosparam file="$(find als_mobile_robot)/config/local_costmap_params.yaml" command="load" />
     <rosparam file="$(find als_mobile_robot)/config/global_costmap_params.yaml" command="load" />
     <rosparam file="$(find als_mobile_robot)/config/dwa_local_planner_params.yaml" command="load" />
     <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
     <remap from="odom" to="$(arg odom_topic)"/>
     <param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)" />
</node>

<!-- rviz -->
    <node pkg="rviz" type="rviz" name="rviz" required="true"
    args="-d $(find als_mobile_robot)/rviz/mcl.rviz"/>

</launch >